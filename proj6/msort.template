//******************************************
// File: msort.template
// Purpose: Implentation file for merge sort functions
// Author: Lisa Roach
// date: 4/28/2014
// 
//******************************************

#include <stdlib.h>	//for size_t
#include <iostream>

//*************************************
// Function: printMerge
// Purpose: Testing function, shows the sorted version of the list
// 
// Parameters:vector<myType> input_list
// Calls: None
// Time Complexity: O(number of items in teh list)
// Space Complexity: O(1)
//
//***********************************
template <typename myType>
void printMerge(vector<myType>& input_list){
	std::cout<<"Merge Sort: "<<std::endl;
	for(int i = 0; i < input_list.size(); i++){
		std::cout<<input_list[i]<<std::endl;
	}		
}	


//Some code taken from Wikibooks
//Algorithm implentation/sorting/merge sort

//*************************************
// Function: msort
// Purpose: Calls mergeSort
// 
// Parameters: vector<myType> input_list
// Calls: mergeSort
// Time Complexity: O(nlogn) with n as number of items in list
// Space Complexity: O(n)
//
//*************************************
template<typename myType>
void msort(vector<myType>& input_list){
	input_list = mergeSort(input_list);
//	printMerge(input_list);

}

//*************************************
// Function: msort
// Purpose:Divides the list and recursively merges the sorted lists back together
// 
// Parameters: vector<myType> input_list
// Calls: merge, msort (recursive)
// Time Complexity: O(nlogn) with n as number of items in the list
// Space Complexity:O(n)
//
//*************************************

template <typename myType>
vector<myType> mergeSort(vector<myType>& input_list){
	if(input_list.size() == 1){	//the vector is sorted
		return input_list;
	}

	typename std::vector<myType>::iterator middle = input_list.begin() + (input_list.size() / 2);
	
	vector<myType> left(input_list.begin(), middle);
	vector<myType> right(middle, input_list.end());

	left = mergeSort(left);
	right = mergeSort(right);

	return merge(left, right);
	
}
//*************************************
// Function: merge
// Purpose: Merge two lists together in order
// 
// Parameters: vector<myType> left, vector<myType> right
// Calls: None
// Time Complexity: O(number of items in list1 + number of items in list 2)
// Space Complexity: O(number of items in list)
//
//*************************************


template <typename myType>
vector<myType> merge(const vector<myType>& left, const vector<myType>& right){
	vector<myType> result;
	size_t left_it = 0, right_it = 0;

	while(left_it < left.size() && right_it < right.size()){
		if(left[left_it] < right[right_it])
		{
			result.push_back(left[left_it]);
			left_it++;
		}
		else{
			result.push_back(right[right_it]);
			right_it++;
		}
	}	//end of while
	
	while(left_it < left.size()){
		result.push_back(left[left_it]);
		left_it++;
	}
	while(right_it < right.size()){
		result.push_back(right[right_it]);
		right_it++;
	}

	return result;
	
}

//Attempt at a natural mergsort- causes a segmentation fault
/* 
template <typename myType>
vector<myType> mergeSort(vector<myType> &input_list){
	vector<myType> output_list;
	vector<myType> temp_list1;
	vector<myType> temp_list2;
	while(input_list.size() > 0){	//while there is anything on input_list
		while(input_list.size() >0){
			naturalMerge(input_list, output_list, temp_list1);
			naturalMerge(input_list, output_list, temp_list2);
		}
		while(temp_list1.size() > 0 || temp_list2.size() >0){	//while anything is on 1 or 2
			naturalMerge(temp_list1, temp_list2, output_list);
			naturalMerge(temp_list1, temp_list2, input_list);
		}
	}
	
	return (output_list);
}

template <typename myType>
void naturalMerge(const vector<myType>& left, const vector<myType>& right, vector<myType>& output_list){
	int currentL = 0, currentR = 0;
	
	do{
		if(left[currentL] <= right[currentR]){
			output_list.push_back(left[currentL]);
			++currentL;
		}
		else{
			output_list.push_back(right[currentR]);
			++currentR;
		}


	}while(left[currentL] < left[currentL+1] && right[currentR] < right[currentR+1]);
	
	if(left[currentL] < left[currentL+1]){
		output_list.push_back(left[currentL]);
	}
	if(right[currentR] < right[currentR+1]){
		output_list.push_back(right[currentR]);
	}



}

*/
