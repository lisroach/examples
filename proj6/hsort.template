//******************************
//	Project: 6, Sorting
//	File: hsort.template Implementation file for heapsort
//	Author: Lisa Roach
//	Date: April 28th, 2014
//	Purpose: Contains the function implementations for heap sort	
//
//*****************************
//using namespace std;
#include <iostream>
#include <stdlib.h>

//*************************************
// Function: hsort
// Purpose: Start the heap sort, call heapiy and put the item in 
// the first spot into the last spot
// Parameters:vector<myType> input_list
// Calls:heapify, buildHeap
// Time Complexity: O(nlogn)
// Space Complexity:O(1)
//
//*************************************

template <typename myType>
void hsort(std::vector<myType> &input_list){
	myType temp;
	
	buildHeap(input_list);

	for(int lastOutOfOrder = input_list.size() - 1;lastOutOfOrder >= 0; lastOutOfOrder--){
		temp = input_list[lastOutOfOrder];
		input_list[lastOutOfOrder] = input_list[0];
		input_list[0] = temp;
		heapify(0, lastOutOfOrder -1, input_list);
	}//end of for

	

//	printHeap(input_list);
}

//*************************************
// Function: buildHeap
// Purpose: Put the list into a heap to be sorted
// 
// Parameters:vector<myType> input_list
// Calls: heapify
// Time Complexity: O(number of items in the list)
// Space Complexity: O(1)
//
//*************************************

template <typename myType>
void buildHeap(std::vector<myType> &input_list){
	int size = input_list.size();
	for(int index = size /2-1; index >= 0; index--){
		heapify(index, size -1, input_list);
	}
}

//*************************************
// Function: heapify
// Purpose:
// 
// Parameters:
// Calls:
// Time Complexity: O(logn) with n as the number of items in the list
// Space Complexity: O(1)
//
//*************************************

template <typename myType>
void heapify(int low, int high, std::vector<myType> &input_list){

	myType temp = input_list[low];
	int largeIndex = 2 * low + 1;
	while(largeIndex <= high){	
		if(largeIndex < high){
			if(input_list[largeIndex] < input_list[largeIndex+1]){
				largeIndex = largeIndex +1;
			}
		}	
		if(temp > input_list[largeIndex]){
			break;
		}
		else{
			input_list[low] = input_list[largeIndex];

			low = largeIndex;
			largeIndex = 2 * low +1;
		}//end else
	}//end while

	input_list[low] = temp; //insert temp into the list
}

//*************************************
// Function:printHeap
// Purpose:Prints out the sorted list for testing purposes
// Not used in this project.
// Parameters:vectro<myType>input_list
// Calls: none
// Time Complexity: O(number of items in the list)
// Space Complexity: O(1)
//
//*************************************

template <typename myType>
void printHeap(std::vector<myType> &input_list){
	for(int i=0; i < input_list.size(); i++){
		std::cout<<input_list[i]<<std::endl;
	}
} 
